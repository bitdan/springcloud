package ${package.Controller};

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.loyotech.basics.common.Result;
import com.loyotech.uavpc.common.util.ParamUtils;
import com.loyotech.uavpc.common.util.ResultExt;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
##import com.loyotech.uav.entity.sys.LoginUser;
##import com.loyotech.uav.enums.LogOperateType;
##import com.loyotech.uav.util.web.WebUtils;

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(value = "$!{table.comment}", tags = "$!{table.comment}")
@RestController
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
//@Slf4j
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end

    #set($serviceName = ${table.serviceName.substring(0,1).toLowerCase()}+${table.serviceName.substring(1)})
    @Autowired
    private ${table.serviceName} ${serviceName};

//    @ApiOperation(value = "查询分页数据")
//    @PostMapping(value = "/list")
//    public Result list(@RequestBody(required = false) Map<String, Object> object) {
//        Page<${entity}> page = ParamUtils.toPage(${entity}.class, object);
//        // 需要like查询字段
//        String[] addLikeKeys = {};
//        Map<String, Object> params = ParamUtils.toParams(object, addLikeKeys);
//        page = ${serviceName}.pageList(page, params);
//        return Result.success(page);
//    }

//    @ApiOperation(value = "查询分页数据")
//    @PostMapping(value = "/list")
//    public Result list(@RequestBody(required = false) Map<String, Object> object) {
//        Page<${entity}> page = ParamUtils.toPage(${entity}.class, object);
//        // like字段-@TableField(condition=SqlCondition.LIKE)
//        ${entity} entity = ParamUtils.toEntity(${entity}.class, object);
//        page = ${serviceName}.pageList(page, entity);
//        return Result.success(page);
//    }

        @ApiOperation(value = "查询分页数据")
        @PostMapping(value = "/list")
        public Result list(@RequestBody(required = false) Map<String, Object> object) {
            Page<${entity}> page = ParamUtils.toPage(object,${entity}.class);
                // 第三种使用Entity进行查询，like字段-@TableField(condition=SqlCondition.LIKE) 等等其它
            ${entity} entity = ParamUtils.toEntity(object,${entity}.class);
            QueryWrapper<${entity}> qw = new QueryWrapper<>();
            if (null != entity) {
                qw.setEntity(entity);
            }
                // qw.orderByAsc("");
            page = ${serviceName}.page(page, qw);
                return ResultExt.success(page);
        }

        @ApiOperation(value = "根据id查询数据")
        @GetMapping(value = "/get")
        public Result get(String id) {
            if (null == id || id.equals("")) {
                return ResultExt.fail("ID不能为空！");
            }
            ${entity} entity = ${serviceName}.getById(id);
                return ResultExt.success(entity);
            }

        @ApiOperation(value = "新增/修改数据")
        @PostMapping(value = "/save")
        public Result save(HttpServletRequest request, @RequestBody ${entity} entity) {
            if (null == entity) {
                return Result.fail("对象不能为空！");
            }
            ${serviceName}.saveOrUpdate(entity);


            return ResultExt.success(entity);
        }

        @ApiOperation(value = "批量删除数据")
        @PostMapping(value = "/delete")
        public Result delete(HttpServletRequest request, @RequestBody List<String> idList) {
            if (null == idList || idList.isEmpty()) {
                return ResultExt.fail("对象不能为空！");
            }
            ${serviceName}.removeByIds(idList);



            return ResultExt.success();
        }
    }

#end